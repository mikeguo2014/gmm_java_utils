
03005
1. 所有属性都必须使用private封装，如果属性需要被外部所使用，定义相应的setter、getter方法。

03006
1. 构造方法是在实例化对象的时候使用，而普通方法是在实例化对象产生之后使用的。
       构造方法本身的定义如下：
      • 构造方法的名称和类名称保持一致；
      • 构造方法不允许有返回值类型声明；
      • 由于对象实例化操作一定需要构造方法的存在，所以如果在类之中没有明确定义构造方法的话，则会自动的生成一个无参的，无返回值的构造方法，供用户使用，如果一个类之中已经明确的定义了一个构造方法的话，则无参的什么都不做的构造方法将不会自动生成，也就是说，一个类之中至少存在一个构造方法。

class Book{
    public Book() {}  //无参的，无返回值的构造方法
}

2. 构造方法是在对象使用关键字new实例化的时候默认调用；
3. 构造方法与普通方法的最大区别：
   • 构造方法实在实例化新对象（new）的时候只调用一次；
   • 普通方法是在实例化对象产生之后可以随意调用多次；
4. 匿名对象（重点）
   new Book("Java开发", 89.9).getInfo();          //匿名对象
   
   
03007 - 简单java类（重要代码） 雇员
   • 类名称必须存在有意义；
   • 类中所有的属性必须private封装，封装后的属性必须提供有setter、getter；
   • 类中可以提供任意多个构造方法，但是必须保留有一个无参构造方法；
   • 类中不允许出现任何的输出语句，所有信息输出必须交给被调用处
   • 类中需要提供一个取得对象完整信息的方法，暂定为getInfo()；
   
03008 数组
数组的基本概念：
格式一：声明并开辟数组
       • 数据类型 数组名称 [] = new 数据类型 [长度] ;
格式二：分步完成
       • 数据类型 数组名称 [] = null ;
       • 数组名称 = new 数据类型 [长度] ;
数组的静态初始化：
格式一：声明并开辟（实例化）数组
       • 数据类型 数组名称 [] = {值,值,...} ; 
       • 数据类型 [] 数组名称= {值,值,...} ; 
格式二：完整格式（推荐使用）
       • 数据类型 数组名称 [] = new 数据类型 [] {值,值,...} ; 
       • 数据类型 [] 数组名称 = new 数据类型 [] {值,值,...} ; 
范例：数组的静态初始化
     int data [] = new int [] {209,201,2,2,3,6,7} ;

     
03009 二维数组
     int data [][] = new int [][]{
         {1,2,3},
         {4,5,6},
         {7,8,9}
     }
     
03010 数据排序 数组转置 （未看完）

03011 
1. 数组拷贝
   System.arraycopy(源数组名称，源数组拷贝考试索引，目标数组名称，目标数组拷贝开始索引，长度)
2. 数组排序
   Arrays.sort(数组名称)
   
03012 对象数组(重点)
  • 动态初始化：开辟之后对象数组的内容都是null值。
    |- 声明并开辟对象数组： 类名称 对象数组名称[] = new 类名称[长度];
    |- 分步完成：
        |- 声明对象数组： 类名称 对象数组名称 [] = null
        |- 开辟对象数组：对象数组名称 = new 类名称[长度];
  • 静态初始化
        类名称 对象数组名称 [] = new 类名称[] {实例化对象,实例化对象,...};
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
